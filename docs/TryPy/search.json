[
  {
    "objectID": "data_types_exercise.html#part-0.-setup-steps",
    "href": "data_types_exercise.html#part-0.-setup-steps",
    "title": "TryPy 2 - Data Types, Indexing, Imports and Plotting",
    "section": "Part 0. Setup Steps",
    "text": "Part 0. Setup Steps\n\nCreate a repo on GitHub named eds217-trypy-02\nClone to create a version-controlled project\nCreate some subfolder infrastructure (docs, data)\nCreate a new quarto in RStudio new .ipynb file called eds-217-trypy-02.ipynb in VSCode. If working on your local machine, make sure to associate the notebook with the eds-217 environment."
  },
  {
    "objectID": "data_types_exercise.html#part-1.-checking-data-types",
    "href": "data_types_exercise.html#part-1.-checking-data-types",
    "title": "TryPy 2 - Data Types, Indexing, Imports and Plotting",
    "section": "Part 1. Checking data types",
    "text": "Part 1. Checking data types\n\nCreate some data, check the classes, index!\n\nVectors, lists & data frames\nIn your notebook (or quarto) document:\n\nCreate a list called vec_1containing the following:\n\n[2, 5, 9, 10, 8, 12, 1, 0]\nCheck the following for that list:\n\nWhat is the type of the list? type()\nAccess the 3rd element and store as vec_1_e3\nAccess the 1st element and store as vec_1_e1\nAccess the 5th through 7th elements and store as vec_1_e5to7\nReassign each element in vec_1 as a string and store the new list as vec_1_char. What does the output look like?\n\n\nCreate a dictionary called dict_1\n\ndict_1 should contained named elements, where town = \"Santa Barbara, location = \"Rincon\", `swell = “south”\n\nTake a look at what you’ve made\nWhat is the type of dictionary values? type()\nWhat is the length of dict_1?\nAccess the ‘location’ value and store as dict_1_v2\n\n\nCreate a data frame in pandas\n\nWrite code to create a data frame called df_1 that looks like this:\n(Note: translate the R code below into python… don’t forget to import pandas as pd)\n{r, echo = FALSE} df_1 <- data.frame(     region = c(\"A\", \"B\", \"A\", \"D\"),     species = c(\"otter\", \"great white\", \"sea lion\", \"gray whale\"),     count = c(12, 2, 36, 6)     ) df_1 max_count <- max(df_1$count)\n\nFind the maximum value of the count column, store as max_count"
  },
  {
    "objectID": "data_types_exercise.html#part-2.-wild-data",
    "href": "data_types_exercise.html#part-2.-wild-data",
    "title": "TryPy 2 - Data Types, Indexing, Imports and Plotting",
    "section": "Part 2. Wild data",
    "text": "Part 2. Wild data\n\nSet-up\n\nThe first CSV listed (AS00601.csv) has been , and take a look at it (outside of R is fine as a first step, e.g. you can open the CSV in Excel)\nSave the AS00601.csv in the data folder of your eds-217 repo.\n\n\n\nRead in the data\n\nRead in the data using pd.read_csv(), store as mack_verts\nLook at what you’ve read in\n\n\n\nA bit of wrangling & exploring\n\nIn a new code chunk, practice accessing individual pieces of the data frame (there is no real functionality to this, but just to reinforce stuff we learned in our interactive session):\n\nStore the 5th value in column \"WEIGHT\" as mc_wt_5. Check by looking at your data frame to confirm.\nStore the 8th - 20th value in the \"LENGTH1\" column as mc_length_8_20. Check by looking at your data frame to confirm.\nStore everything in column SAMPLEDATE as a pd.Series called mc_dates\n\n\n\n\nMake a salamander subset\n\nCreate a subset that only contains observations for Pacific Giant Salamanders (species Dicamptodon tenebrosus, stored in SPECIES as DITE). Store the subset as mc_salamanders.\n\nHint: use logical operator to filter for the rows you want.\nFor example, the following code block creates a new dataframe df_new containing only the rows in df_old where the value of column named ID is equal to Batman.\n    df_new = df_old[df_old['ID'] == 'Batman']\n\n\nMake a scatterplot of salamander length x weight\n\nCreate a scatterplot of LENGTH1 (snout-vent length in millimeters) versus WEIGHT (grams) for all salamanders in the subset you created above, mc_salamanders. Update axis labels, title, subtitle, and add a caption with the data source. Customize point color and size, possibly opacity, and theme.\nExport your scatterplot as salamander_size.png to your figs folder using the fig.savefig() command.\n\n\n\nMake a cutthroat plot\n\nSimilar to above, make a subset called mc_trout that only contains observations for cutthroat trout (species “ONCL”)\n\nNote: In the following, it is way easier to make use the sns.relplot() command in the seaborn library than matplotlib\n\nCreate a scatterplot of \"LENGHTH1\" by \"WEIGHT\" for all trout in the dataset\nCustomize so that the point color depends on reach\nFacet your plot by creek reach (col=\"REACH\" in sns.relplot())\nUpdate graph axis labels and title (fig.set(xlabel=\"string\",ylabel=\"string\"))\nExport your graph as cutthroat_size.png to the figs folder (fig.savefig())"
  },
  {
    "objectID": "TryPy.html#trypy-exercises",
    "href": "TryPy.html#trypy-exercises",
    "title": "TryPy - Re-examining R exercises through Python",
    "section": "TryPy Exercises",
    "text": "TryPy Exercises\n\nSt. Louis Lead data exercise (reading csv, dataframe calculations, simple plots)\n\n\nData types, indexing, import and plot data\n\n\nConditionals and Loops"
  },
  {
    "objectID": "stl_blood_exercise.html#part-0.-setup-steps",
    "href": "stl_blood_exercise.html#part-0.-setup-steps",
    "title": "TryPy 1 - Exploring St. Louis Blood Toxicity Data",
    "section": "Part 0. Setup Steps",
    "text": "Part 0. Setup Steps\n\nCreate a repo on GitHub named eds217-trypy-01\nClone to create a version-controlled project\nCreate some subfolder infrastructure (docs, data)\nCreate a new quarto in RStudio called jupyter notebook eds-217-trypy.ipynb. If working on your local machine, make sure to associate the notebook with the eds-217 environment.\n\n\nPart 1 - Get the data\n\n\"\"\"\nCreate a new variable containing \nthe link to the .csv file on \nthe EDS_221 github repository.\n\"\"\"\nurl = 'https://raw.githubusercontent.com/'\\\n      'allisonhorst/EDS_221_programming-essentials/'\\\n      'main/activities/stl_blood_lead.csv'\n\n\"\"\" \npandas can read a csv file into a \ndataframe directly from a url:\n\"\"\"\nstl_lead = pd.read_csv(url)\nRead more about the data here.\n\n\nPart 2 - Explore the data\nCreate a new notebook, or this notebook:\n\nCreate a code cell that imports the numpy and pandas packages and run the cell to import the packages.\nUse the code above to read the url for stl_blood_lead.csv into a pandas DataFrame called stl_lead\nDo some basic exploration of the dataset using the DataFrame info and describe commands.\nIn a new code chunk, from stl_lead create a new column called prop_white that contains the percent of each census tract identifying as white (variable white in the dataset divided by variable totalPop, times 100).\n\nHint: df['new_col'] = df['col_a'] / df['col_b'] will create a new column new_col that contains the value of col_a / col_b\n\n\nPart 3 - Create a scatterplot\n\nImport matplotlib (import matplotlib.pyplot as plt)\nCreate a scatterplot graph of the percentage of children in each census tract with elevated blood lead levels (pctElevated) versus the percent of each census tract identifying as white.\n\n\n\nPart 4 - Create a histogram\n\nCreate a histogram of only the pctElevated column in the data frame\nCustomize the fill, color, and size aesthetics - test some stuff! Feel free to make it awful."
  },
  {
    "objectID": "conditionals_and_loops.html#part-0.-setup-steps",
    "href": "conditionals_and_loops.html#part-0.-setup-steps",
    "title": "TryPy 3 - For Loops and Conditionals",
    "section": "Part 0. Setup Steps",
    "text": "Part 0. Setup Steps\n\nCreate a repo on GitHub named eds217-trypy-03\nClone to create a version-controlled project\nCreate some subfolder infrastructure (docs, data)\nCreate a new python notebook.\nComplete all tasks for Part 1 in this .ipynb*"
  },
  {
    "objectID": "conditionals_and_loops.html#part-1.-conditional-statements-for-loops",
    "href": "conditionals_and_loops.html#part-1.-conditional-statements-for-loops",
    "title": "TryPy 3 - For Loops and Conditionals",
    "section": "Part 1. Conditional statements & for loops",
    "text": "Part 1. Conditional statements & for loops\nComplete each of the following in a separate code chunk.\n\nConditional statements\n\nTask 1\nCreate an object called pm2_5 with a value of 48 (representing Particulate Matter 2.5, an indicator for air quality, in \\frac{\\mu g}{m^3} (see more about PM2.5 here).\nWrite an if - else if - else statement that returns “Low to moderate risk” if pm2_5 (for Particulate Matter 2.5) is less than 100, “Unhealthy for sensitive groups” if PM 2.5 is 100 <= pm2_5 < 150, and “Health risk present” if PM 2.5 is >= 150.\nTest by changing the value of your pm2_5 object and re-running your statement to check.\n\n\nTask 2\nStore the string “blue whale” as an object called species.\nWrite an if statement that returns “You found a whale!” if the string “whale” is detected in species, otherwise return nothing.\nTest by changing the species string & re-running to see output.\n\n\nTask 3\nCreate a vector stored as max_airtemp_c with a value of 24.1.\nWrite an if else statement that will print “Temperature too high” if max_airtemp_c is greater than 27, or “Temperature OK” if temperature is less than or equal to 27.\n\n\nTask 4\nStore the base price of a burrito as base_burrito with a value of 6.50. Store main_ingredent with a starting string of “veggie.”\nWrite a statement that will return the price of a burrito based on what a user specifies as “main_ingredient” (either “veggie”, “chicken” or “steak”) given the following:\n\nA veggie burrito is the cost of a base burrito\nA chicken burrito costs 3.00 more than a base burrito\nA steak burrito costs 3.25 more than a base burrito\n\n\n\n\nFor loops\nComplete each of the following in a separate code chunk.\n\nTask 5\nCreate a new vector called fish that contains the values 8, 10, 12, 23 representing counts of different fish types in a fish tank (goldfish, tetras, guppies, and mollies, respectively).\nWrite a for loop that iterates through fish, and returns what proportion of total fish in the tank are that species.\nAssume that these counts represent all fish in the tank.\n\n\nTask 6\nPython has a list of month names stored in the calendar library (part of the standard library in Python). You can load this list using from calendar import month_name. These items are stored so that “January” is in month_name[1], meaning this is one of the rare arrays in python that is not zero-indexed.\nWrite a for loop that iterates over all months in month_name and prints “January is month 1,” “February is month 2”, etc.\nHint: you can index values in the month_name vector just like you would any other vector (e.g., try running month_name[5])."
  },
  {
    "objectID": "conditionals_and_loops.html#part-2.-real-data",
    "href": "conditionals_and_loops.html#part-2.-real-data",
    "title": "TryPy 3 - For Loops and Conditionals",
    "section": "Part 2. Real data",
    "text": "Part 2. Real data\nYou will complete Part 3 in a separate notebook\nExplore this data package from EDI, which contains a “Data file describing the biogeochemistry of samples collected at various sites near Toolik Lake, North Slope of Alaska”. Familiarize yourself with the metadata (particularly, View full metadata > expand ‘Data entities’ to learn more about the variables in the dataset).\nCitation: Kling, G. 2016. Biogeochemistry data set for soil waters, streams, and lakes near Toolik on the North Slope of Alaska, 2011. ver 5. Environmental Data Initiative. https://doi.org/10.6073/pasta/362c8eeac5cad9a45288cf1b0d617ba7\n\nDownload the CSV containing the Toolik biogeochemistry data\nTake a look at it - how are missing values stored? Keep that in mind.\nDrop the CSV into your data folder of your project\nCreate a new qmd document, save in docs as toolik_chem.ipynb\nImport the pandas and janitor package in your setup code chunk.\nRead in the data as toolik_biochem. Remember, you’ll want to specify here how NA values are stored. Use the clean_names() function to convert all column names to lower case/underscore format.\nCreate a subset of the data that contains only observations from the “Toolik Inlet” site, and that only contains the variables (columns) for pH, dissolved organic carbon (DOC), and total dissolved nitrogen (TDN). Store this subset as inlet_biochem. Make sure to LOOK AT the subset you’ve created.\nFind the mean value of each column in inlet_biochem 2 different ways:\n\n\nWrite a for loop from scratch to calculate the mean for each\nUse one other method (e.g. .mean(), or .apply()) to find the mean for each column.\n\n\nSave, stage, commit, pull, push!"
  },
  {
    "objectID": "conditionals_and_loops.html#end-activities",
    "href": "conditionals_and_loops.html#end-activities",
    "title": "TryPy 3 - For Loops and Conditionals",
    "section": "END activities",
    "text": "END activities"
  }
]